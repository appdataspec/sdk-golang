// Code generated by counterfeiter. DO NOT EDIT.
package appdatapath

import (
	"sync"
)

type Fake struct {
	GlobalStub        func() (string, error)
	globalMutex       sync.RWMutex
	globalArgsForCall []struct{}
	globalReturns     struct {
		result1 string
		result2 error
	}
	globalReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PerUserStub        func() (string, error)
	perUserMutex       sync.RWMutex
	perUserArgsForCall []struct{}
	perUserReturns     struct {
		result1 string
		result2 error
	}
	perUserReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Global() (string, error) {
	fake.globalMutex.Lock()
	ret, specificReturn := fake.globalReturnsOnCall[len(fake.globalArgsForCall)]
	fake.globalArgsForCall = append(fake.globalArgsForCall, struct{}{})
	fake.recordInvocation("Global", []interface{}{})
	fake.globalMutex.Unlock()
	if fake.GlobalStub != nil {
		return fake.GlobalStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.globalReturns.result1, fake.globalReturns.result2
}

func (fake *Fake) GlobalCallCount() int {
	fake.globalMutex.RLock()
	defer fake.globalMutex.RUnlock()
	return len(fake.globalArgsForCall)
}

func (fake *Fake) GlobalReturns(result1 string, result2 error) {
	fake.GlobalStub = nil
	fake.globalReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Fake) GlobalReturnsOnCall(i int, result1 string, result2 error) {
	fake.GlobalStub = nil
	if fake.globalReturnsOnCall == nil {
		fake.globalReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.globalReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Fake) PerUser() (string, error) {
	fake.perUserMutex.Lock()
	ret, specificReturn := fake.perUserReturnsOnCall[len(fake.perUserArgsForCall)]
	fake.perUserArgsForCall = append(fake.perUserArgsForCall, struct{}{})
	fake.recordInvocation("PerUser", []interface{}{})
	fake.perUserMutex.Unlock()
	if fake.PerUserStub != nil {
		return fake.PerUserStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.perUserReturns.result1, fake.perUserReturns.result2
}

func (fake *Fake) PerUserCallCount() int {
	fake.perUserMutex.RLock()
	defer fake.perUserMutex.RUnlock()
	return len(fake.perUserArgsForCall)
}

func (fake *Fake) PerUserReturns(result1 string, result2 error) {
	fake.PerUserStub = nil
	fake.perUserReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Fake) PerUserReturnsOnCall(i int, result1 string, result2 error) {
	fake.PerUserStub = nil
	if fake.perUserReturnsOnCall == nil {
		fake.perUserReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.perUserReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.globalMutex.RLock()
	defer fake.globalMutex.RUnlock()
	fake.perUserMutex.RLock()
	defer fake.perUserMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ AppDataPath = new(Fake)
