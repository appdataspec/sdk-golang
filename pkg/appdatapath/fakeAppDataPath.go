// This file was generated by counterfeiter
package appdatapath

import (
	"sync"
)

type FakeAppDataSpec struct {
	GlobalStub        func() string
	globalMutex       sync.RWMutex
	globalArgsForCall []struct{}
	globalReturns     struct {
		result1 string
	}
	PerUserStub        func() string
	perUserMutex       sync.RWMutex
	perUserArgsForCall []struct{}
	perUserReturns     struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppDataSpec) Global() string {
	fake.globalMutex.Lock()
	fake.globalArgsForCall = append(fake.globalArgsForCall, struct{}{})
	fake.recordInvocation("Global", []interface{}{})
	fake.globalMutex.Unlock()
	if fake.GlobalStub != nil {
		return fake.GlobalStub()
	}
	return fake.globalReturns.result1
}

func (fake *FakeAppDataSpec) GlobalCallCount() int {
	fake.globalMutex.RLock()
	defer fake.globalMutex.RUnlock()
	return len(fake.globalArgsForCall)
}

func (fake *FakeAppDataSpec) GlobalReturns(result1 string) {
	fake.GlobalStub = nil
	fake.globalReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAppDataSpec) PerUser() string {
	fake.perUserMutex.Lock()
	fake.perUserArgsForCall = append(fake.perUserArgsForCall, struct{}{})
	fake.recordInvocation("PerUser", []interface{}{})
	fake.perUserMutex.Unlock()
	if fake.PerUserStub != nil {
		return fake.PerUserStub()
	}
	return fake.perUserReturns.result1
}

func (fake *FakeAppDataSpec) PerUserCallCount() int {
	fake.perUserMutex.RLock()
	defer fake.perUserMutex.RUnlock()
	return len(fake.perUserArgsForCall)
}

func (fake *FakeAppDataSpec) PerUserReturns(result1 string) {
	fake.PerUserStub = nil
	fake.perUserReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAppDataSpec) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.globalMutex.RLock()
	defer fake.globalMutex.RUnlock()
	fake.perUserMutex.RLock()
	defer fake.perUserMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAppDataSpec) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ AppDataPath = new(FakeAppDataSpec)
